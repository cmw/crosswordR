<% title "Home" %>
<head>
	<script type="text/javascript">
		// HTML contents of cells and rows
		var cell = '<div class="cellContainer"><input class="cell" type="text" cellnumber=-1 acrossclue=-1 downclue=-1 maxlength="1"></input><div class="cellNum"></div></div>';
		var row = '<div class="row"></div>';
		
		var mode="solve";
		
		// The Crossword Class
		function Crossword(voids, letters, clues){
			this.voids = voids;
			this.letters = letters;
			this.clues=clues;
		}
		
		//Reference variables used throughout		
		var $cells;
		var $cellNums;
		
		//Variables defining current crossword's dimensions
		var numRows = 15;
		var numCols = 15;
		
		// Public counter for counting which cell was last numbered
		var cellNumberingCounter = 1;
		
		// Functions for removing the puzzle elements
		function deleteCells(){
			$(".cells").remove();
		}
		function deleteRows(){
			$(".row").remove();
		}
		
		// Functions for modifying strings. For use in the puzzle input and output
		function removeBrackets(stringWithBrackets){
			return stringWithBrackets.replace(/[\[\]']+/g, '');
		}
		function removeApostrophes(stringWithApostrophes){
			return stringWithApostrophes.replace(/'/g, '');
		}
		function sanitizeClue(clueString){
			var newString = clueString.replace(/"/g, '\'\'');
			newString = newString.replace(/\'/g, '\\\'');
			return newString;
		}
		
		//Function to return a cell's index within the array of cells
		function getCellIndex(cell){
			return $cells.index(cell);
		}
		
		//Functions for using a cell position to find its index or itself
		function getCellIndexFromRC(row, col){
			return row*numCols+col;
		}
		function get$CellfromRC(row, col){
			return $($cells[getCellIndexFromRC(row,col)]);
		}
		
		// Functions returning rows and columns of a cell given it or its index
		function getRow($cellIndexOr$Cell){
			if (typeof($cellIndexOr$Cell)=="number"){
				return Math.floor($cellIndexOr$Cell)/numRows;
			} else if (typeof($cellIndexOr$Cell)=="object") {
				return Math.floor(getCellIndex($cellIndexOr$Cell)/numRows);
			} else {
				throwIndexCellError();
			}
		}
		function getCol($cellIndexOr$Cell){
			if (typeof($cellIndexOr$Cell)=="number"){
				return $cellIndexOr$Cell % numCols;
			} else if (typeof($cellIndexOr$Cell)=="object") {
				return getCellIndex($cellIndexOr$Cell) % numCols;
			} else {
				throwIndexCellError();
			}
		}
		
		// Functions for determining whether a cell in the crossword is an edge cell.
		function isTopRowCell(cellIndexOr$Cell){
			if (typeof(cellIndexOr$Cell)=="number"){
				return cellIndexOr$Cell<numCols && cellIndexOr$Cell >= 0;
			} else if (typeof(cellIndexOr$Cell)=="object") {
				return getRow(cellIndexOr$Cell) == 0;
			} else {
				throwIndexCellError();
			}
		}
		function isBotRowCell(cellIndexOr$Cell){
			if (typeof(cellIndexOr$Cell)=="number"){
				var finalCell = numCols*numRows-1;
				return cellIndexOr$Cell > finalCell - numCols;
			} else if (typeof(cellIndexOr$Cell)=="object") {
				return getRow(cellIndexOr$Cell) == (numRows-1);
			} else {
				throwIndexCellError();
			}
		}
		function isLeftColCell(cellIndexOr$Cell){
			if (typeof(cellIndexOr$Cell) == "number"){
				return cellIndexOr$Cell % numCols == 0;
			} else if (typeof(cellIndexOr$Cell) == "object") {
				return getCol(cellIndexOr$Cell) == 0;
			} else {
				throwIndexCellError();
			}
		}
		function isRightColCell(cellIndexOr$Cell){
			if (typeof(cellIndexOr$Cell)=="number"){
			return cellIndexOr$Cell % numCols==(numCols-1);
			} else if (typeof(cellIndexOr$Cell)=="object") {
				return getCol(cellIndexOr$Cell) == (numCols-1);
			} else {
				throwIndexCellError();
			}
		}
		function throwIndexCellError(){
			throw new Error("Invalid input. Only cell indices (integers) and cell jQuery objects are allowed.");
		}
		
		
		// Functions returning adjacent cells
		function $cellAbove(cellIndexOr$Cell){
			if (typeof(cellIndexOr$Cell)=="number"){
				return $($cells[cellIndexOr$Cell-numCols]);
			} else if (typeof(cellIndexOr$Cell)=="object") {
				return $($cells[getCellIndex(cellIndexOr$Cell)-numCols]);
			} else {
				throwIndexCellError();
			}
		}
		function $cellBelow(cellIndexOr$Cell){
			if (typeof(cellIndexOr$Cell)=="number"){
				return $($cells[cellIndexOr$Cell+numCols]);
			} else if (typeof(cellIndexOr$Cell)=="object") {
				return $($cells[getCellIndex(cellIndexOr$Cell)+numCols]);
			} else {
				throwIndexCellError();
			}
		}
		function $cellLeft(cellIndexOr$Cell){
			if (typeof(cellIndexOr$Cell)=="number"){
				return $($cells[cellIndexOr$Cell-1]);
			} else if (typeof(cellIndexOr$Cell)=="object") {
				return $($cells[getCellIndex(cellIndexOr$Cell)-1]);
			} else {
				throwIndexCellError();
			}
		}
		function $cellRight(cellIndexOr$Cell){
			if (typeof(cellIndexOr$Cell)=="number"){
				return $($cells[cellIndexOr$Cell+1]);
			} else if (typeof(cellIndexOr$Cell)=="object") {
				return $($cells[getCellIndex(cellIndexOr$Cell)+1]);
			} else {
				throwIndexCellError();
			}
		}
		function $cellOpposite(cellIndexOr$Cell){
			if (typeof(cellIndexOr$Cell)=="number"){
				return $($cells[numCols*numRows-cellIndexOr$Cell]);
			} else if (typeof(cellIndexOr$Cell)=="object") {
				return $($cells[numCols*numRows-getCellIndex(cellIndexOr$Cell)-1]);
			} else {
				throwIndexCellError();
			}
		}
		
		//Functions to get the nearest clued cell above or left
		function getClueLeft($cell){
			if(hasAcrossClue($cell) && !isVoid($cell)){
				return {'Number':parseFloat($cell.attr('cellnumber')),'Clue':acrossClue($cell)};
			}
			else if (isLeftColCell(getCellIndex($cell)) || isVoid($cell)){
				return false;
			}
			else {
				return getClueLeft($cellLeft($cell));
			}
		}
		function getClueAbove($cell){
			if(hasDownClue($cell) && !isVoid($cell)){
				return {'Number':parseFloat($cell.attr('cellnumber')),'Clue':downClue($cell)};
			}
			else if (isTopRowCell(getCellIndex($cell)) || isVoid($cell)){
				return false;
			}
			else {
				return getClueAbove($cellAbove($cell));
			}
		}
		function hasDownClue($cell){
			if($cell.attr('downclue') && ($cell.attr('downclue')!=-1)){
				return true;
			}
			else {
				return false;
			}
		}
		function hasAcrossClue($cell){
			if($cell.attr('acrossclue') && ($cell.attr('acrossclue')!=-1)){
				return true;
			}
			else {
				return false;
			}
		}
		function downClue($cell){
			return $cell.attr('downclue');
		}
		function acrossClue($cell){
			return $cell.attr('acrossclue');
		}
		
		//Helper function for making a cell void and toggling a cell void
		function makeVoid($cell){
			removeCorrectness($cell);
			$cell.val('');
			$cell.addClass('void');
			if ( $('#autoMirror').attr('checked') && !isVoid($cellOpposite($cell)) ){
				if($cellOpposite($cell).val()){
					if( confirm('Overwrite the "' + $cellOpposite($cell).val().toUpperCase() +'" in mirror cell at ('+ ((getRow($cellOpposite($cell)))+1)+','+ (getCol($cellOpposite($cell))+1) +')?')) {
						makeVoid($cellOpposite($cell));
					}						
				} else {
					makeVoid($cellOpposite($cell));
				}
			}
		}
		function toggleVoid($cell){
			if($cell.hasClass('void')){
				$cell.removeClass('void');
				if( $('#autoMirror').attr('checked') && isVoid($cellOpposite($cell)) ){
					toggleVoid($cellOpposite($cell));
				}
			} 
			else {
				makeVoid($cell);
			}
			updateWhiteBlack();
			numberCells();
		}
		
		// Helper function to remove correctness from a cell
		function removeCorrectness(cell){
			cell.removeClass('correct');
			cell.removeClass('incorrect');
		}
		
		//Helper function to say whether a cell is void
		function isVoid(cell){
			return cell.hasClass('void');
		}
		
		/*
		Functions for determining whether adjacent cells are void and thus determining
		whether the cell is lone/single.
		*/
		function hasLetterAbove(cellIndex){
			return ((!isTopRowCell(cellIndex)) && (!$cellAbove(cellIndex).hasClass('void')));
		}
		function hasLetterBelow(cellIndex){
			return ((!isBotRowCell(cellIndex)) && (!$cellBelow(cellIndex).hasClass('void')));
		}
		function hasLetterLeft(cellIndex){
			return ((!isLeftColCell(cellIndex)) && (!$cellLeft(cellIndex).hasClass('void')));
		}
		function hasLetterRight(cellIndex){
			return ((!isRightColCell(cellIndex)) && (!$cellRight(cellIndex).hasClass('void')));
		}
		function isLoneCell(cellIndex){
			return ((!hasLetterAbove(cellIndex) && !hasLetterBelow(cellIndex)) || (!hasLetterLeft(cellIndex) && !hasLetterRight(cellIndex)));
		}
		
		/*
		Functions to input and output data about the puzzle. Input methods accept
		either arrays or comma-separated string representing arrays
		*/
		function outputVoids(){
			var cellString = '';
			var cellArray = new Array();
			for (var i = 0, ii = $cells.length; i < ii; i++){
				if($($cells[i]).hasClass('void')){
					if(cellString.length > 0){
						cellString += ', ';
					} 
					cellString += i;
					cellArray[cellArray.length]=i;
				}
			}
			return cellArray;
		}
		function inputVoids(voidArray){
			if(Object.prototype.toString.call(voidArray) === '[object String]'){
				voidArray = removeBrackets(voidArray).split(',');
			}
			$cells.removeClass('void');
			for (var i = 0; i < voidArray.length; i++){
				makeVoid($($cells[voidArray[i]]));
			}
		}
		function outputLetters(){
			var cellArray = new Array();
			for (var i =0; i<$cells.length; i++){
				$cell = $($cells[i]);
				if ($cell.hasClass('void')){
					cellArray[i] = '';
				}
				else {
					cellArray[i] = $cell.val();
				}
			}
			return cellArray;
		}
		function inputLetters(letterArray){
			if(Object.prototype.toString.call(letterArray) === '[object String]'){
				letterArray = removeBrackets(letterArray).split(',');
			}
			for (var i = 0; i<$cells.length; i++){
				$($cells[i]).val(letterArray[i]);
			}
		}
		function outputClues(){
			var clueString = '[';
			var $numberedCells = $('.cell[cellnumber != "-1"]');
			for (var i = 0; i< $numberedCells.length; i++){
				var $cell = $($numberedCells[i]);
				if(i==0){
					if(hasAcrossClue($cell)){
						clueString += ('{"Across":"'+$cell.attr('acrossClue')+'",');
					}
					else {
						clueString += '{"Across":"",';
					}
					if(hasDownClue($cell)){
						clueString += ('"Down":"' + $cell.attr('downClue')+'"}');
					}
					else {
						clueString += '"Down":""}';
					}
				} 
				else {
					if(hasAcrossClue($cell)){
						clueString += (',{"Across":"'+$cell.attr('acrossClue')+'",');
					}
					else {
						clueString += ',{"Across":"",';
					}
					if(hasDownClue($cell)){
						clueString += ('"Down":"' + $cell.attr('downClue')+'"}');
					}
					else {
						clueString += '"Down":""}';
					}
				}
			}
			clueString += ']';
			return clueString;
		}
		function inputClues(JSONClueString){
			var arrayOfAssociativeClueArray = JSON.parse(JSONClueString);
			for(var i = 0; i< arrayOfAssociativeClueArray.length; i++){
				if(arrayOfAssociativeClueArray[i]['Across']){
					$('.cell[cellnumber ='+ (i+1)+']').attr('acrossclue',arrayOfAssociativeClueArray[i]['Across']);
				}
				if(arrayOfAssociativeClueArray[i]['Down']){
					$('.cell[cellnumber ='+(i+1)+']').attr('downclue',arrayOfAssociativeClueArray[i]['Down']);
				}
			}	
		}
		
		//Function to automatically number the cells of a blank puzzle
		function numberCells(){
			clearNumbers();
			cellNumberingCounter = 1;
			for(var i = 0; i<$cells.length; i++){
				$cell = $($cells[i]);
				$cellNum = $($cellNums[i]);
				
				if(!$cell.hasClass('void') && (!isLoneCell(i) || ((($('#skipSingles').length > 0) && !$('#skipSingles').attr('checked'))))){
					if(isTopRowCell(i)){
						addNumber($cell,$cellNum);
					}
					else if (isLeftColCell(i)){
						addNumber($cell,$cellNum);
					} 
					else if($cellAbove(i)){
						if($cellAbove(i).hasClass('void')){
							addNumber($cell,$cellNum);
						} 
						else if($cellLeft(i)){
							if ($cellLeft(i).hasClass('void')){
								addNumber($cell,$cellNum);
							}
						}
					}
				}
			}
			cellNumberingCounter = 1;
		}
		
		//Helper function for adding numbers to non-void cells
		function addNumber(cell,cellNum){
			cell.attr('cellnumber',cellNumberingCounter);
			cellNum.text(''+cellNumberingCounter);
			cellNumberingCounter+=1;
		}
		
		// Functions for clearing various parts of the puzzle
		function clearNumbers(){
			$cellNums.text('');
			$cells.attr('cellnumber',-1);
		}
		function clearVoids(){
			$cells.removeClass('void');
		}
		function clearLetters(){
			$cells.val('');
		}
		function clearCorrectness(){
			$cells.removeClass('correct');
			$cells.removeClass('incorrect');
		}
		function clearCells(){
			clearLetters();
			clearNumbers();
			clearVoids();
			clearCorrectness();
			$('#cheatResult').text('');
		}
		function clearClues(){
			$cells.attr('acrossclue',-1);
			$cells.attr('downclue',-1);
		}
		function clearCredits(){
			$('.cwordTitle').text('+');
			$('.cwordCreator').text('+');
			$('.cwordYear').text('');
		}
		//Updates the puzzle's stats
		function updateRCTip() {
			$('#rowDim').text(numRows);
			$('#colDim').text(numCols);
		}
		function updateWhiteBlack(){
			$('#whiteCellCount').text($('.cell:not(.void)').length);
			$('#blackCellCount').text($('.cell.void').length);
		}
		function updateStats(){
			updateRCTip();
			updateWhiteBlack();
		}
		
		function updateTitle(){
			if(currentCrossword.title){
				$('.cwordTitle').text(currentCrossword.title);
			}
		}
		function updateCreator(){
			if(currentCrossword.creator){
				$('.cwordCreator').text(currentCrossword.creator);
			}
		}
		function updateYear(){
			if(currentCrossword.creator){
				$('.cwordYear').text(currentCrossword.year);
			}
		}
		
		//Clue functions
		function getClueOrientation(){	
			if($('#acrossDownAddClue').attr('checked')){
				return 'across';
			}
			else {
				return 'down';
			}
		}
		function getClueText(){
			return $('#clueForm textarea#clueInput').val();
		}
		function getClueCellNumber(){
			return $('#clueForm #clueCell').val();
		}
		
		//Function to add a clue to a cell
		function addClue(clueString, cellNumber, direction){
			$cell = $('.cell[cellnumber='+cellNumber+']');
			if(direction == 'across'){
				$cell.attr('acrossclue',clueString);
			}
			else if (direction == 'down'){
				$cell.attr('downclue',clueString);
			}
		}
		
		/*
		Checks the cells that the user has filled against the answers for the current puzzle.
		Fills in incorrect answers and highlights them red, while highlighting correct answers green.
		*/
		function cheat(){
			if(currentCrossword == dylan2){
				alert("Duuuuuuude. Just work on a different part of the puzzle. Unless you're stuck on 20-Across, then I'll just tell you... it's ALHEAR.");
			} else {
			correctLetters = 0;
			totalLetters = 0;
			for(var i = 0; i< $cells.length; i++){
				$cell = $($cells[i]);
				if (!$cell.hasClass('void')){
					totalLetters += 1;
					if(($cell.val().toLowerCase() === currentCrossword.letters[i].toLowerCase()) && (!$cell.hasClass('incorrect'))){
						correctLetters += 1;
						$cell.addClass('correct');
					}
					else {
						$cell.addClass('incorrect');
						$cell.val(currentCrossword.letters[i]);
					}
				
				}
			}
			var congrats = (correctLetters > 0.8*totalLetters)? 'Awesome job!' : 'Sucks, brah.';
			$('#cheatResult').css({opacity: 1}).text('You got '+ correctLetters + ' out of ' + totalLetters+' correct. ' + congrats);
			}
		}
		function showIncorrect(){
			var incorrectLetters = 0;
			for(var i = 0; i< $cells.length; i++){
				$cell = $($cells[i]);
				if (!$cell.hasClass('void')){
					if(($cell.val().toLowerCase() !== currentCrossword.letters[i].toLowerCase()) && !$cell.hasClass('incorrect')){
						$cell.removeClass('correct');
						$cell.addClass('flashRed');
					} else if ( ($cell.val().toLowerCase() == currentCrossword.letters[i].toLowerCase())  && (!$cell.hasClass('correct')) ){
						$cell.addClass('correct');
					}
				}
			}
			if($('.flashRed').length == 0){
				$('#cheatResult').text('You solved the puzzle!').animate({opacity: 1}, 'fast','linear');
			} else {
				$('#cheatResult').text('Still ' + $('.flashRed').length + ' letters to solve!').animate({opacity: 1},500, 'linear').delay(1000);
				$('.flashRed').animate({backgroundColor: 'rgba(255,192,203,1)'}, 400,'linear').delay(600).animate({backgroundColor: 'rgba(255,255,255,0)'}, 800, 'linear').removeClass('flashRed');
				$('#cheatResult').animate({opacity: 0},'medium');
			}
		}
		
		function toggleAdvanced(){
			$('#pen').toggleClass('hidden');
			$('#advControls').toggleClass('hidden');
		}
		
		function toggleText($object,text1,text2){
			if($object.text()==text1){
				$object.text(text2);
			} else if ($object.text() == text2){
				$object.text(text1);
			} else {
				throw new Error("Not toggling");
			}
		}
		
		function loadCrossword(crossword){
			clearCells();
			clearClues();
			inputVoids(crossword.voids);
			numberCells();
			currentCrossword = crossword;
			inputClues(crossword.clues);
			updateStats();
			updateTitle();
			updateCreator();
			solveMode();
		}
		function newCrossword(){
			clearCells(); 
			clearClues(); 
			currentCrossword=new Crossword([],[],[]); 
			clearCredits();
			editMode();
		}
		
		function editMode() {
			mode = "edit";
			$('.solveTools').fadeOut(100,'linear',function(){
				$('.editTools').fadeIn(300);
			});
			
			$('.editable').attr('contentEditable', true);
		}
		function solveMode() {
			mode = "solve";
			$('.editTools').fadeOut(100,'linear',function(){
				$('.solveTools').fadeIn(300);
			});
			$('.editable').attr('contentEditable', false);
		}
		function toggleMode() {
			if((mode != "edit") && (mode !="solve")){
				throw new Error("Invalid current mode: " + mode);
			} else {
				toggleText($('#mode'),'EDIT','SOLVE');
				$('#mode').toggleClass('solveMode editMode');					
				if(mode == "solve"){
					editMode();
				} else {
					solveMode();
				}
			}
		}
		
		
		/*
		Document load function that sets up the puzzle cells and prepares the dblclick
		event listener to allow the users to change cells to and from void
		*/
		$(document).ready(function(){
			for (var i = 0; i<numRows; i++){
				$("#cword").append(row);
			}
			for (var i = 0; i<numCols; i++){
				$(".row").append(cell);
			}
			//Initialize the cells, cellNumbers, and row x col tag
			$cells = $('.cell');
			$cellNums = $('.cellNum');
			
			
			$(".cell").on('dblclick', function() {
				if(mode=="edit"){
					$(this).val('');
					toggleVoid($(this));
				}
			});
			
			//When the user hovers or focuses a cell, its clues are dynamically displayed and it is highlighted
			$cells.on('mouseenter focusin',
				function(){
					$('.cellContainer').removeClass('hoverCell');
					if(!isVoid($(this))){
						$(this).parent().addClass('hoverCell');
						if($('#dishStain').css('display')!='none' || $('#dishStain').css('opacity')>0){
							$('#dishStain').stop();
							$('#dishStain').fadeOut(400);	
						}
					} else {
						if($('#dishStain').css('display')=='none' || $('#dishStain').css('opacity')< 1){
							$('#dishStain').stop();
							$('#dish').fadeIn(1000);	
						}
					}
					if (getClueLeft($(this))){
						if($('.curA').is(":hidden")){
							$('.curA').show();
						}
						$('#curClueA').text(getClueLeft($(this))['Number']);
						$('#acrossP').html(getClueLeft($(this))['Clue']);
					}
					else {
						if($('.curA').is(":visible")){
							$('.curA').hide();
						}
					}
					if (getClueAbove($(this))){
						if($('.curD').is(":hidden")){
							$('.curD').show();
						}
						$('#curClueD').text(getClueAbove($(this))['Number']);
						$('#downP').html(getClueAbove($(this))['Clue']);
					}
					else {
						if($('.curD').is(":visible")){
							$('.curD').hide();
						}
					}
				});					
			$cells.on('focusout mouseleave',
				function(){
					$(this).parent().removeClass('hoverCell');
				}
			);
			
			//When a cell is focused, highlights the contents of the cell for easy changes
			//Oddly written timeout because otherwise the keypress focuses don't properly highlight
			$cells.on('focus', function(){
				var save_this = $(this);
				window.setTimeout (function(){save_this.select();},1);
			});
			
			//Prevents non-digit values from being typed in cell number textbox
			$('.numbersOnly').keyup(function () { 
				this.value = this.value.replace(/[^0-9\.]/g,'');
			});
			
			//Quick cell navigation key binds
			$cells.on('keydown',function(event){
				switch (event.which) {
					case 13:
						$cellBelow(this).select();
						break;
					case 37:
						$cellLeft(this).select();
						break;
					case 38:
						$cellAbove(this).select();
						break;
					case 39:
						$cellRight(this).select();
						break;
					case 40:
						$cellBelow(this).select();
						break;
						
				}
			});
			$('#wordsToUseBar input[type=text]').on('keydown',function(event){
				switch (event.which) {
					case 13:
						var contents = $(this).val();
						if(contents){
							var wordToAdd = $('<li class="weakHidden"><input type="checkbox" /><span>' + contents + '</span></li>');
							wordToAdd.appendTo('#wordsToUse');
							$('#wordsToUse > li.weakHidden').fadeIn(200,function(){
								$(this).removeClass('weakHidden');
							});
							$(this).val('');
						}
						break;
				}	
			});

			//Advanced tools toggle on pen-click
			$('#advHeader, #advBracket, #pen').on('click',function(){
				toggleAdvanced();
			});
			
			//Warning alert when a user un-checks Skip Singles
			$('#skipSingles').on('change',function() {
				if(!$(this).prop("checked")){
					var changeSkipBox = confirm('Be careful. Most crossword puzzles do not contain one-letter words.\n\nThose that do generally don\'t number them. Although we provide the option, this box should probably remain checked.');
					if(!changeSkipBox){
						$(this).prop("checked", !$(this).prop("checked"));
					}
				}
			});
			//Allows user to disable and enable the default caps-lock in cells
			$('#allCaps').on('change',function() {
				if($(this).prop("checked")){
					$cells.css('text-transform', 'uppercase');
				}
				else {
					$cells.css('text-transform', 'none');
				}
			});
			$('#wordsUseContainer').on('change','input[type=checkbox]',function(){
				if( $.inArray(this,$('#wordsToUse input')) >=0 ){
					$(this).closest('li').fadeOut(200,function(){
						$(this).appendTo($('#wordsUsed')).fadeIn(200);
					});
				} else if( $.inArray(this,$('#wordsUsed input')) >=0 ){
					$(this).closest('li').fadeOut(200,function(){
						$(this).appendTo($('#wordsToUse')).fadeIn(200);
					});
				} else {
					console.log(0);
				}
			});
			$('#wordsToUse, #wordsUsed').on('dblclick','li',function(){
				$(this).fadeOut(200,function(){
					$(this).remove();
				});
			});
			updateStats();
			$('.draggable').draggable({cancel:".notDraggable"});
		});
	</script>
</head>
<body>
	<div id='puzzleBox'>
		<div id="topPuzzleBox">
			<div id="leftControls" class="left">
				<h5 id="advHeader" class="pointer">Advanced</h5>
				<img id="advBracket" class="pointer" src="/assets/advBracket.png" width="65%" height="24em" />
				<img id="pen" class="pointer" src="/assets/fountainPen.png" height="75%" />
				<div id="advControls" class="hidden">
					<span class="left">Current Mode: <span id="mode" class="solveMode">SOLVE</span></span>
					<button id="showData" class="left" onclick="toggleMode();">SWITCH MODE</button>
					<hr />
					<button value="Clear Voids" id="clearVoids" onclick="clearVoids(); clearNumbers();">Clear Voids</button>
					<button value="Void All" id="voidAll" onclick="makeVoid($cells);">Void All</button>
					<div id="autoMirrorContainer" class="puzControlCheckContainer">
						<input type="checkbox" id="autoMirror" class="puzControlCheck" checked />&nbsp;&nbsp;<span>Auto-Mirror</span>
					</div>
					<hr />
					<button value="Clear Letters" id="clearLetters" onclick="clearLetters();">Clear Letters</button>
					<div id="allCapsContainer" class="puzControlCheckContainer">
						<input type="checkbox" id="allCaps" class="puzControlCheck" checked />&nbsp;&nbsp;<span>All &nbsp;&nbsp;Caps?</span>
					</div>
					<hr />
					<button value="Clear Clues" id="clearClues" onclick="clearClues();">Clear Clues</button>
					<hr />
					<button value="Re-number Cells" id="renumber" onclick="clearNumbers(); numberCells();"/>Re-number</button>
					<div id="skipSingleContainer" class="puzControlCheckContainer">
						<input type="checkbox" id="skipSingles" class="puzControlCheck" checked />&nbsp;&nbsp;<span>Skip &nbsp;&nbsp;singles?</span>
					</div>
					<hr />
					<h6>Puzzle Stats:</h6>
					<span id="stats">
						Dimensions:<span id="rowDim">?</span><span>&nbsp;x&nbsp;</span><span id="colDim">?</span><br />
						Cells -- White: <span id="whiteCellCount">?</span> Black: <span id="blackCellCount"></span>
					</span>
				</div>
			</div>
			<div id="cwordContainer" class="container left">
				<div id="titleBar" class="shadow">
					<span contentEditable="false" class="editable cwordTitle">Welcome!</span>
				</div>
				<div id='cword' class="shadow"></div>
				<div id="creatorCredit" class="shadow">
					<span contentEditable="false" class="editable cwordCreator">&nbsp;</span><span type="text" class="cwordYear" ></span>
				</div>
			</div>
			<div id="rightControls" class="left">
				<div id="currentClue">
					<img id="dishStain" src="/assets/dishStain.png" height="80%" >
					<div id="clueHolder">
						<h6 class="curA"><span id="curClueA">?</span>-Across</h6>
						<p class="clueP curA" id="acrossP">???</p>
						<h6 class="curD"><span id="curClueD">?</span>-Down</h6>
						<p class="clueP curD" id="downP">???</p>
					</div>
				</div>
				<div id="clueForm" class="editTools">
					<h5>Add Clues</h5>
					<textarea id ="clueInput" placeholder="Clue" cols="35"></textarea>
					<hr />
					<div id="clueCellID">
						<span id="clueCellIDtitle">Cell #</span>
						<input type="text" maxlength="2" id="clueCell" class="numbersOnly"/>
						<div class="onoffswitch">
						<input type="checkbox" name="onoffswitch" class="onoffswitch-checkbox" id="acrossDownAddClue" checked>
							<label class="onoffswitch-label" for="acrossDownAddClue">
								<div class="onoffswitch-inner">
									<div class="onoffswitch-active">Across</div>
									<div class="onoffswitch-inactive">Down</div>
								</div>
								<div class="onoffswitch-switch"></div>
							</label>
						</div>
						<button id="clueButton" value="Add Clue" onclick="addClue(getClueText(),getClueCellNumber(),getClueOrientation()); $('#clueInput').val('');$('#clueCell').val('');" >Add Clue</button>
					</div>
				</div>
				<div id="results" class="solveTools">
					<input type="button" value="Show Incorrect" id="showIncorrect" onclick="showIncorrect();"/>
					<div id='cheatResult'></div>
					<input type="button" value="Cheat!" id="cheat" onclick="cheat();"/>
				</div>
			</div>
		</div>
		<div id="botPuzzleBox" class="editTools">
			<h5>Puzzle Data (comma-separated)</h5>
			<textarea id="cwordInputOutput" rows = "3" cols="100" placeholder="Input or output data about this crossword"></textarea>
			<button class='inputOutputButton' value="Input Voids" id="inputVoids" onclick=" inputVoids($('#cwordInputOutput').val());">Input Voids</button>
			<button class='inputOutputButton' value="Output Voids" id="outputVoids" onclick="$('#cwordInputOutput').val('['+outputVoids().join(',')+']');">Output Voids</button>
			<button class='inputOutputButton' value="Input Letters" id="inputLetters" onclick="inputLetters($('#cwordInputOutput').val());">Input Letters</button>
			<button class='inputOutputButton' value="Output Letters" id="outputLetters" onclick="$('#cwordInputOutput').val('['+outputLetters().join(',')+']');">Output Letters</button>
			<button class='inputOutputButton' value="Input Clues" id="inputClues" onclick="inputClues($('#cwordInputOutput').val());return false;">Input Clues</button>
			<button class='inputOutputButton' value="Output Clues" id="outputClues" onclick="$('#cwordInputOutput').val(outputClues());">Output Clues</button>
			<br />
		</div>
	</div>
	<!--<div id="notes"></div>-->
	<div id="wordsToUseBar" class="draggable editTools">
		<input type="text" class="notDraggable" placeholder="Words to Use" maxlength="25" size="16"/>
		<div id="wordsUseContainer" class="notDraggable">
			<ul id="wordsToUse">
			</ul>
			<ul id="wordsUsed">
			</ul>
		</div>
	</div>
</body>